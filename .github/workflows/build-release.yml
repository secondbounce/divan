name: 'Build release files'

on:
  push:
    tags:
      - "v*.*"
  workflow_dispatch:

env:
  NODE_VERSION: 16

jobs:
  build:
    name: Build binaries for Windows
    runs-on: macos-latest
    # environment: production
    timeout-minutes: 60

    permissions:
      contents: read

    # env:
    #   APPLEID: ${{secrets.APPLEID}}
    #   APPLEIDPASS: ${{secrets.APPLEIDPASS}}
    #   ASCPROVIDER: ${{secrets.ASCPROVIDER}}
    #   CSC_LINK: ${{secrets.MACOS_CSC_LINK}}
    #   CSC_KEY_PASSWORD: ${{secrets.MACOS_CSC_KEY_PASSWORD}}
    #   USE_HARD_LINKS: false

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      # - name: Cache node modules
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-node-modules
      #   with:
      #     # npm cache files are stored in `~/.npm`
      #     path: ~/.npm
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-
      #       ${{ runner.os }}-build-
      #       ${{ runner.os }}-

      - name: Set up node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get current tag
        id: get-tag
        uses: aaronbarnaby/get-tag@v1.0.0
        with:
          without_prefix_v: true

      - name: Set the output filename
        run: |
          echo "APP_VERSION=${{ steps.get-tag.outputs.tag }}" >> $GITHUB_ENV
          echo "WINDOWS_INSTALLER_NAME=divan-setup.${{ steps.get-tag.outputs.tag }}.exe" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm ci

# TODO: uncomment when workflow is complete
      # - name: Check lint
      #   run: npm run lint

# TODO: uncomment when tests are fixed
      # - name: Run headless unit test
      #   run: npm run test

      # - name: Run headless e2e test
      #   run: npm run e2e

      - name: Compile the app ${{ env.APP_VERSION }}
        run: npm run build:prod

      # - name: TEMP - list files in dist folder
      #   run: ls ./dist

      # - name: Upload app script files
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: app-script-files
      #     path: |
      #       ./dist/
      #       ./app/
      #       !./app/node_modules

      - name: Build windows installer
        run: npx electron-builder build --windows nsis --publish=never --config.nsis.artifactName="${{ env.WINDOWS_INSTALLER_NAME }}"

      - name: TEMP - list files in release folder
        run: ls ./release

      - name: Upload windows installer (${{ env.WINDOWS_INSTALLER_NAME }})
        uses: actions/upload-artifact@v3
        with:
          name: win-installer
          path: ./release/${{ env.WINDOWS_INSTALLER_NAME }}




      # - name: Get version from package.json
      #   id: app-version
      #   run: |
      #     PACKAGE_VERSION=$(node -p -e "require('./packages/desktop/package.json').version")
      #     echo "::set-output name=PACKAGE_VERSION::$PACKAGE_VERSION"

      # - name: Verify notarization
      #   run: |
      #     codesign --verify --deep --strict --verbose=2 ./packages/desktop/packages/mac/Mockoon.app
      #     codesign --verify --deep --strict --verbose=2 ./packages/desktop/packages/mac-arm64/Mockoon.app
      #     codesign --verify --deep --strict --verbose=2 ./packages/desktop/packages/mac-universal/Mockoon.app

      # - name: Get universal binary shasum
      #   run: |
      #     shasum -a 256 ./packages/desktop/packages/mockoon.setup.${{steps.app-version.outputs.PACKAGE_VERSION}}.universal.dmg

      # - name: Upload macOS dmg
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: dmg
      #     path: ./packages/desktop/packages/mockoon.setup*.dmg





  # build-windows:
  #   name: Build Windows binaries
  #   runs-on: windows-latest
  #   needs: build-macos

  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v3

      # - name: Set up node ${{ env.NODE_VERSION }}
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: ${{ env.NODE_VERSION }}

      # - name: Install dependencies
      #   run: npm i

# TODO: uncomment when tests are fixed
      # - name: Run headless unit test
      #   run: npm run test

      # - name: Run headless e2e test
      #   run: npm run e2e

      # - name: Get current tag
      #   id: get-tag
      #   uses: aaronbarnaby/get-tag@v1.0.0
      #   with:
      #     without_prefix_v: true

      # - name: Set the output filename for ${{ env.APP_VERSION }}
      #   run: echo "INSTALLER_NAME=divan-setup.${{ env.APP_VERSION }}.exe" >> $GITHUB_ENV

      # - name: Compile the app
      #   run: npm run build:prod

      # - name: Download app script files from `build-macos` job
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: app-script-files

      # - name: Build the windows installer (${{ env.INSTALLER_NAME }})
      #   run: npx electron-builder build --windows nsis --publish=never --config.nsis.artifactName="${{ env.INSTALLER_NAME }}"

      # - name: TEMP - list files in release folder
      #   run: dir ./release

      # - name: Upload windows installer
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: windows-installer
      #     path: ./release/${{ env.INSTALLER_NAME }}

      # - name: Create Github pre-release
      #   if: (startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-')) || !startsWith(github.ref, 'refs/tags/v')
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: ./autolot.*.zip
      #     prerelease: true

      # - name: Create Github release
      #   if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: ./autolot.*.zip
      #     prerelease: false

  create-release:
    name: Create draft release with binaries
    runs-on: ubuntu-latest
    needs: build
    # environment: production
    # timeout-minutes: 60

# TODO: figure out what permissions we need
    # permissions:
      # actions: read|write|none
      # checks: read|write|none
      # contents: read|write|none
      # deployments: read|write|none
      # id-token: read|write|none
      # issues: read|write|none
      # discussions: read|write|none
      # packages: read|write|none
      # pages: read|write|none
      # pull-requests: read|write|none
      # repository-projects: read|write|none
      # security-events: read|write|none
      # statuses: read|write|none

    # env:
    #   APPLEID: ${{secrets.APPLEID}}
    #   APPLEIDPASS: ${{secrets.APPLEIDPASS}}
    #   ASCPROVIDER: ${{secrets.ASCPROVIDER}}
    #   CSC_LINK: ${{secrets.MACOS_CSC_LINK}}
    #   CSC_KEY_PASSWORD: ${{secrets.MACOS_CSC_KEY_PASSWORD}}
    #   USE_HARD_LINKS: false

    steps:
      - name: Download Windows installer from `build` job
        uses: actions/download-artifact@v3
        with:
          name: win-installer

      # - name: Download all artifacts from `build` job
      #   uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: ls -R

      - name: Create Github pre-release
        if: (startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-')) || !startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: true
          files: |
            ./**/*

      - name: Create Github release
        if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: false
          files: |
            ./**/*
